let System, __instantiateAsync, __instantiate;
(() => {
  const t = new Map();
  function e(e, s) {
    return {
      id: e,
      import: (s) =>
        (async function (e, s) {
          let n = e.replace(/\.\w+$/i, "");
          if (n.includes("./")) {
            const [t, ...e] = n.split("/").reverse(),
              [, ...i] = s.split("/").reverse(),
              r = [t];
            let o,
              a = 0;
            for (; (o = e.shift()); )
              if (".." === o) a++;
              else {
                if ("." === o) break;
                r.push(o);
              }
            a < i.length && r.push(...i.slice(a)), (n = r.reverse().join("/"));
          }
          return t.has(n) ? i(n) : import(e);
        })(s, e),
      meta: { url: e, main: s },
    };
  }
  function s(t) {
    return (e, s) => {
      s = "string" == typeof e ? { [e]: s } : e;
      for (const [e, n] of Object.entries(s))
        Object.defineProperty(t, e, { value: n, writable: !0, enumerable: !0 });
    };
  }
  function n(n) {
    for (const [i, r] of t.entries()) {
      const { f: t, exp: o } = r,
        { execute: a, setters: l } = t(s(o), e(i, i === n));
      delete r.f, (r.e = a), (r.s = l);
    }
  }
  async function i(e) {
    if (!t.has(e)) return;
    const s = t.get(e);
    if (s.s) {
      const { d: t, e: e, s: n } = s;
      delete s.s, delete s.e;
      for (let e = 0; e < n.length; e++) n[e](await i(t[e]));
      const r = e();
      r && (await r);
    }
    return s.exp;
  }
  (System = {
    register(e, s, n) {
      t.set(e, { d: s, f: n, exp: {} });
    },
  }),
    (__instantiateAsync = async (t) => (
      (System = __instantiateAsync = __instantiate = void 0), n(t), i(t)
    )),
    (__instantiate = (e) => (
      (System = __instantiateAsync = __instantiate = void 0),
      n(e),
      (function e(s) {
        if (!t.has(s)) return;
        const n = t.get(s);
        if (n.s) {
          const { d: t, e: s, s: i } = n;
          delete n.s, delete n.e;
          for (let s = 0; s < i.length; s++) i[s](e(t[s]));
          s();
        }
        return n.exp;
      })(e)
    ));
})(),
  System.register(
    "https://unpkg.com/lit-html@1.2.1/lib/directive",
    [],
    function (t, e) {
      "use strict";
      var s;
      e && e.id;
      return {
        setters: [],
        execute: function () {
          (s = new WeakMap()),
            t("directive", (t) => (...e) => {
              const n = t(...e);
              return s.set(n, !0), n;
            }),
            t("isDirective", (t) => "function" == typeof t && s.has(t));
        },
      };
    }
  ),
  System.register("https://unpkg.com/lit-html@1.2.1/lib/dom", [], function (
    t,
    e
  ) {
    "use strict";
    e && e.id;
    return {
      setters: [],
      execute: function () {
        t(
          "isCEPolyfill",
          "undefined" != typeof window &&
            null != window.customElements &&
            void 0 !== window.customElements.polyfillWrapFlushCallback
        ),
          t("reparentNodes", (t, e, s = null, n = null) => {
            for (; e !== s; ) {
              const s = e.nextSibling;
              t.insertBefore(e, n), (e = s);
            }
          }),
          t("removeNodes", (t, e, s = null) => {
            for (; e !== s; ) {
              const s = e.nextSibling;
              t.removeChild(e), (e = s);
            }
          });
      },
    };
  }),
  System.register("https://unpkg.com/lit-html@1.2.1/lib/part", [], function (
    t,
    e
  ) {
    "use strict";
    e && e.id;
    return {
      setters: [],
      execute: function () {
        t("noChange", {}), t("nothing", {});
      },
    };
  }),
  System.register(
    "https://unpkg.com/lit-html@1.2.1/lib/template",
    [],
    function (t, e) {
      "use strict";
      var s, n, i, r, o, a;
      e && e.id;
      return {
        setters: [],
        execute: function () {
          t("marker", (s = `{{lit-${String(Math.random()).slice(2)}}}`)),
            t("nodeMarker", (n = `\x3c!--${s}--\x3e`)),
            t("markerRegex", (i = new RegExp(`${s}|${n}`))),
            t("boundAttributeSuffix", "$lit$"),
            t(
              "Template",
              class {
                constructor(t, e) {
                  (this.parts = []), (this.element = e);
                  const n = [],
                    l = [],
                    u = document.createTreeWalker(e.content, 133, null, !1);
                  let c = 0,
                    h = -1,
                    p = 0;
                  const {
                    strings: d,
                    values: { length: m },
                  } = t;
                  for (; p < m; ) {
                    const t = u.nextNode();
                    if (null !== t) {
                      if ((h++, 1 === t.nodeType)) {
                        if (t.hasAttributes()) {
                          const e = t.attributes,
                            { length: s } = e;
                          let n = 0;
                          for (let t = 0; t < s; t++)
                            r(e[t].name, "$lit$") && n++;
                          for (; n-- > 0; ) {
                            const e = d[p],
                              s = a.exec(e)[2],
                              n = s.toLowerCase() + "$lit$",
                              r = t.getAttribute(n);
                            t.removeAttribute(n);
                            const o = r.split(i);
                            this.parts.push({
                              type: "attribute",
                              index: h,
                              name: s,
                              strings: o,
                            }),
                              (p += o.length - 1);
                          }
                        }
                        "TEMPLATE" === t.tagName &&
                          (l.push(t), (u.currentNode = t.content));
                      } else if (3 === t.nodeType) {
                        const e = t.data;
                        if (e.indexOf(s) >= 0) {
                          const s = t.parentNode,
                            l = e.split(i),
                            u = l.length - 1;
                          for (let e = 0; e < u; e++) {
                            let n,
                              i = l[e];
                            if ("" === i) n = o();
                            else {
                              const t = a.exec(i);
                              null !== t &&
                                r(t[2], "$lit$") &&
                                (i =
                                  i.slice(0, t.index) +
                                  t[1] +
                                  t[2].slice(0, -"$lit$".length) +
                                  t[3]),
                                (n = document.createTextNode(i));
                            }
                            s.insertBefore(n, t),
                              this.parts.push({ type: "node", index: ++h });
                          }
                          "" === l[u]
                            ? (s.insertBefore(o(), t), n.push(t))
                            : (t.data = l[u]),
                            (p += u);
                        }
                      } else if (8 === t.nodeType)
                        if (t.data === s) {
                          const e = t.parentNode;
                          (null !== t.previousSibling && h !== c) ||
                            (h++, e.insertBefore(o(), t)),
                            (c = h),
                            this.parts.push({ type: "node", index: h }),
                            null === t.nextSibling
                              ? (t.data = "")
                              : (n.push(t), h--),
                            p++;
                        } else {
                          let e = -1;
                          for (; -1 !== (e = t.data.indexOf(s, e + 1)); )
                            this.parts.push({ type: "node", index: -1 }), p++;
                        }
                    } else u.currentNode = l.pop();
                  }
                  for (const t of n) t.parentNode.removeChild(t);
                }
              }
            ),
            (r = (t, e) => {
              const s = t.length - e.length;
              return s >= 0 && t.slice(s) === e;
            }),
            t("isTemplatePartActive", (t) => -1 !== t.index),
            t("createMarker", (o = () => document.createComment(""))),
            t(
              "lastAttributeNameRegex",
              (a = /([ \x09\x0a\x0c\x0d])([^\0-\x1F\x7F-\x9F "'>=\/]+)([ \x09\x0a\x0c\x0d]*=[ \x09\x0a\x0c\x0d]*(?:[^ \x09\x0a\x0c\x0d"'`<>=]*|"[^"]*|'[^']*))$/)
            );
        },
      };
    }
  ),
  System.register(
    "https://unpkg.com/lit-html@1.2.1/lib/template-instance",
    [
      "https://unpkg.com/lit-html@1.2.1/lib/dom",
      "https://unpkg.com/lit-html@1.2.1/lib/template",
    ],
    function (t, e) {
      "use strict";
      var s, n;
      e && e.id;
      return {
        setters: [
          function (t) {
            s = t;
          },
          function (t) {
            n = t;
          },
        ],
        execute: function () {
          t(
            "TemplateInstance",
            class {
              constructor(t, e, s) {
                (this.__parts = []),
                  (this.template = t),
                  (this.processor = e),
                  (this.options = s);
              }
              update(t) {
                let e = 0;
                for (const s of this.__parts)
                  void 0 !== s && s.setValue(t[e]), e++;
                for (const t of this.__parts) void 0 !== t && t.commit();
              }
              _clone() {
                const t = s.isCEPolyfill
                    ? this.template.element.content.cloneNode(!0)
                    : document.importNode(this.template.element.content, !0),
                  e = [],
                  i = this.template.parts,
                  r = document.createTreeWalker(t, 133, null, !1);
                let o,
                  a = 0,
                  l = 0,
                  u = r.nextNode();
                for (; a < i.length; )
                  if (((o = i[a]), n.isTemplatePartActive(o))) {
                    for (; l < o.index; )
                      l++,
                        "TEMPLATE" === u.nodeName &&
                          (e.push(u), (r.currentNode = u.content)),
                        null === (u = r.nextNode()) &&
                          ((r.currentNode = e.pop()), (u = r.nextNode()));
                    if ("node" === o.type) {
                      const t = this.processor.handleTextExpression(
                        this.options
                      );
                      t.insertAfterNode(u.previousSibling),
                        this.__parts.push(t);
                    } else
                      this.__parts.push(
                        ...this.processor.handleAttributeExpressions(
                          u,
                          o.name,
                          o.strings,
                          this.options
                        )
                      );
                    a++;
                  } else this.__parts.push(void 0), a++;
                return (
                  s.isCEPolyfill &&
                    (document.adoptNode(t), customElements.upgrade(t)),
                  t
                );
              }
            }
          );
        },
      };
    }
  ),
  System.register(
    "https://unpkg.com/lit-html@1.2.1/lib/template-result",
    [
      "https://unpkg.com/lit-html@1.2.1/lib/dom",
      "https://unpkg.com/lit-html@1.2.1/lib/template",
    ],
    function (t, e) {
      "use strict";
      var s, n, i, r;
      e && e.id;
      return {
        setters: [
          function (t) {
            s = t;
          },
          function (t) {
            n = t;
          },
        ],
        execute: function () {
          (i = ` ${n.marker} `),
            t(
              "TemplateResult",
              (r = class {
                constructor(t, e, s, n) {
                  (this.strings = t),
                    (this.values = e),
                    (this.type = s),
                    (this.processor = n);
                }
                getHTML() {
                  const t = this.strings.length - 1;
                  let e = "",
                    s = !1;
                  for (let r = 0; r < t; r++) {
                    const t = this.strings[r],
                      o = t.lastIndexOf("\x3c!--");
                    s = (o > -1 || s) && -1 === t.indexOf("--\x3e", o + 1);
                    const a = n.lastAttributeNameRegex.exec(t);
                    e +=
                      null === a
                        ? t + (s ? i : n.nodeMarker)
                        : t.substr(0, a.index) +
                          a[1] +
                          a[2] +
                          n.boundAttributeSuffix +
                          a[3] +
                          n.marker;
                  }
                  return (e += this.strings[t]);
                }
                getTemplateElement() {
                  const t = document.createElement("template");
                  return (t.innerHTML = this.getHTML()), t;
                }
              })
            ),
            t(
              "SVGTemplateResult",
              class extends r {
                getHTML() {
                  return `<svg>${super.getHTML()}</svg>`;
                }
                getTemplateElement() {
                  const t = super.getTemplateElement(),
                    e = t.content,
                    n = e.firstChild;
                  return e.removeChild(n), s.reparentNodes(e, n.firstChild), t;
                }
              }
            );
        },
      };
    }
  ),
  System.register(
    "https://unpkg.com/lit-html@1.2.1/lib/parts",
    [
      "https://unpkg.com/lit-html@1.2.1/lib/directive",
      "https://unpkg.com/lit-html@1.2.1/lib/dom",
      "https://unpkg.com/lit-html@1.2.1/lib/part",
      "https://unpkg.com/lit-html@1.2.1/lib/template-instance",
      "https://unpkg.com/lit-html@1.2.1/lib/template-result",
      "https://unpkg.com/lit-html@1.2.1/lib/template",
    ],
    function (t, e) {
      "use strict";
      var s, n, i, r, o, a, l, u, c, h, p, d, m;
      e && e.id;
      return {
        setters: [
          function (t) {
            s = t;
          },
          function (t) {
            n = t;
          },
          function (t) {
            i = t;
          },
          function (t) {
            r = t;
          },
          function (t) {
            o = t;
          },
          function (t) {
            a = t;
          },
        ],
        execute: function () {
          t(
            "isPrimitive",
            (l = (t) =>
              null === t || !("object" == typeof t || "function" == typeof t))
          ),
            t(
              "isIterable",
              (u = (t) => Array.isArray(t) || !(!t || !t[Symbol.iterator]))
            ),
            t(
              "AttributeCommitter",
              (c = class {
                constructor(t, e, s) {
                  (this.dirty = !0),
                    (this.element = t),
                    (this.name = e),
                    (this.strings = s),
                    (this.parts = []);
                  for (let t = 0; t < s.length - 1; t++)
                    this.parts[t] = this._createPart();
                }
                _createPart() {
                  return new h(this);
                }
                _getValue() {
                  const t = this.strings,
                    e = t.length - 1;
                  let s = "";
                  for (let n = 0; n < e; n++) {
                    s += t[n];
                    const e = this.parts[n];
                    if (void 0 !== e) {
                      const t = e.value;
                      if (l(t) || !u(t))
                        s += "string" == typeof t ? t : String(t);
                      else
                        for (const e of t)
                          s += "string" == typeof e ? e : String(e);
                    }
                  }
                  return (s += t[e]);
                }
                commit() {
                  this.dirty &&
                    ((this.dirty = !1),
                    this.element.setAttribute(this.name, this._getValue()));
                }
              })
            ),
            t(
              "AttributePart",
              (h = class {
                constructor(t) {
                  (this.value = void 0), (this.committer = t);
                }
                setValue(t) {
                  t === i.noChange ||
                    (l(t) && t === this.value) ||
                    ((this.value = t),
                    s.isDirective(t) || (this.committer.dirty = !0));
                }
                commit() {
                  for (; s.isDirective(this.value); ) {
                    const t = this.value;
                    (this.value = i.noChange), t(this);
                  }
                  this.value !== i.noChange && this.committer.commit();
                }
              })
            ),
            t(
              "NodePart",
              class t {
                constructor(t) {
                  (this.value = void 0),
                    (this.__pendingValue = void 0),
                    (this.options = t);
                }
                appendInto(t) {
                  (this.startNode = t.appendChild(a.createMarker())),
                    (this.endNode = t.appendChild(a.createMarker()));
                }
                insertAfterNode(t) {
                  (this.startNode = t), (this.endNode = t.nextSibling);
                }
                appendIntoPart(t) {
                  t.__insert((this.startNode = a.createMarker())),
                    t.__insert((this.endNode = a.createMarker()));
                }
                insertAfterPart(t) {
                  t.__insert((this.startNode = a.createMarker())),
                    (this.endNode = t.endNode),
                    (t.endNode = this.startNode);
                }
                setValue(t) {
                  this.__pendingValue = t;
                }
                commit() {
                  if (null === this.startNode.parentNode) return;
                  for (; s.isDirective(this.__pendingValue); ) {
                    const t = this.__pendingValue;
                    (this.__pendingValue = i.noChange), t(this);
                  }
                  const t = this.__pendingValue;
                  t !== i.noChange &&
                    (l(t)
                      ? t !== this.value && this.__commitText(t)
                      : t instanceof o.TemplateResult
                      ? this.__commitTemplateResult(t)
                      : t instanceof Node
                      ? this.__commitNode(t)
                      : u(t)
                      ? this.__commitIterable(t)
                      : t === i.nothing
                      ? ((this.value = i.nothing), this.clear())
                      : this.__commitText(t));
                }
                __insert(t) {
                  this.endNode.parentNode.insertBefore(t, this.endNode);
                }
                __commitNode(t) {
                  this.value !== t &&
                    (this.clear(), this.__insert(t), (this.value = t));
                }
                __commitText(t) {
                  const e = this.startNode.nextSibling,
                    s =
                      "string" == typeof (t = null == t ? "" : t)
                        ? t
                        : String(t);
                  e === this.endNode.previousSibling && 3 === e.nodeType
                    ? (e.data = s)
                    : this.__commitNode(document.createTextNode(s)),
                    (this.value = t);
                }
                __commitTemplateResult(t) {
                  const e = this.options.templateFactory(t);
                  if (
                    this.value instanceof r.TemplateInstance &&
                    this.value.template === e
                  )
                    this.value.update(t.values);
                  else {
                    const s = new r.TemplateInstance(
                        e,
                        t.processor,
                        this.options
                      ),
                      n = s._clone();
                    s.update(t.values), this.__commitNode(n), (this.value = s);
                  }
                }
                __commitIterable(e) {
                  Array.isArray(this.value) ||
                    ((this.value = []), this.clear());
                  const s = this.value;
                  let n,
                    i = 0;
                  for (const r of e)
                    void 0 === (n = s[i]) &&
                      ((n = new t(this.options)),
                      s.push(n),
                      0 === i
                        ? n.appendIntoPart(this)
                        : n.insertAfterPart(s[i - 1])),
                      n.setValue(r),
                      n.commit(),
                      i++;
                  i < s.length && ((s.length = i), this.clear(n && n.endNode));
                }
                clear(t = this.startNode) {
                  n.removeNodes(
                    this.startNode.parentNode,
                    t.nextSibling,
                    this.endNode
                  );
                }
              }
            ),
            t(
              "BooleanAttributePart",
              class {
                constructor(t, e, s) {
                  if (
                    ((this.value = void 0),
                    (this.__pendingValue = void 0),
                    2 !== s.length || "" !== s[0] || "" !== s[1])
                  )
                    throw new Error(
                      "Boolean attributes can only contain a single expression"
                    );
                  (this.element = t), (this.name = e), (this.strings = s);
                }
                setValue(t) {
                  this.__pendingValue = t;
                }
                commit() {
                  for (; s.isDirective(this.__pendingValue); ) {
                    const t = this.__pendingValue;
                    (this.__pendingValue = i.noChange), t(this);
                  }
                  if (this.__pendingValue === i.noChange) return;
                  const t = !!this.__pendingValue;
                  this.value !== t &&
                    (t
                      ? this.element.setAttribute(this.name, "")
                      : this.element.removeAttribute(this.name),
                    (this.value = t)),
                    (this.__pendingValue = i.noChange);
                }
              }
            ),
            t(
              "PropertyCommitter",
              class extends c {
                constructor(t, e, s) {
                  super(t, e, s),
                    (this.single =
                      2 === s.length && "" === s[0] && "" === s[1]);
                }
                _createPart() {
                  return new p(this);
                }
                _getValue() {
                  return this.single ? this.parts[0].value : super._getValue();
                }
                commit() {
                  this.dirty &&
                    ((this.dirty = !1),
                    (this.element[this.name] = this._getValue()));
                }
              }
            ),
            t("PropertyPart", (p = class extends h {})),
            (d = !1),
            (() => {
              try {
                const t = {
                  get capture() {
                    return (d = !0), !1;
                  },
                };
                window.addEventListener("test", t, t),
                  window.removeEventListener("test", t, t);
              } catch (t) {}
            })(),
            t(
              "EventPart",
              class {
                constructor(t, e, s) {
                  (this.value = void 0),
                    (this.__pendingValue = void 0),
                    (this.element = t),
                    (this.eventName = e),
                    (this.eventContext = s),
                    (this.__boundHandleEvent = (t) => this.handleEvent(t));
                }
                setValue(t) {
                  this.__pendingValue = t;
                }
                commit() {
                  for (; s.isDirective(this.__pendingValue); ) {
                    const t = this.__pendingValue;
                    (this.__pendingValue = i.noChange), t(this);
                  }
                  if (this.__pendingValue === i.noChange) return;
                  const t = this.__pendingValue,
                    e = this.value,
                    n =
                      null == t ||
                      (null != e &&
                        (t.capture !== e.capture ||
                          t.once !== e.once ||
                          t.passive !== e.passive)),
                    r = null != t && (null == e || n);
                  n &&
                    this.element.removeEventListener(
                      this.eventName,
                      this.__boundHandleEvent,
                      this.__options
                    ),
                    r &&
                      ((this.__options = m(t)),
                      this.element.addEventListener(
                        this.eventName,
                        this.__boundHandleEvent,
                        this.__options
                      )),
                    (this.value = t),
                    (this.__pendingValue = i.noChange);
                }
                handleEvent(t) {
                  "function" == typeof this.value
                    ? this.value.call(this.eventContext || this.element, t)
                    : this.value.handleEvent(t);
                }
              }
            ),
            (m = (t) =>
              t &&
              (d
                ? { capture: t.capture, passive: t.passive, once: t.once }
                : t.capture));
        },
      };
    }
  ),
  System.register(
    "https://unpkg.com/lit-html@1.2.1/lib/default-template-processor",
    ["https://unpkg.com/lit-html@1.2.1/lib/parts"],
    function (t, e) {
      "use strict";
      var s, n;
      e && e.id;
      return {
        setters: [
          function (t) {
            s = t;
          },
        ],
        execute: function () {
          t(
            "DefaultTemplateProcessor",
            (n = class {
              handleAttributeExpressions(t, e, n, i) {
                const r = e[0];
                if ("." === r) {
                  return new s.PropertyCommitter(t, e.slice(1), n).parts;
                }
                return "@" === r
                  ? [new s.EventPart(t, e.slice(1), i.eventContext)]
                  : "?" === r
                  ? [new s.BooleanAttributePart(t, e.slice(1), n)]
                  : new s.AttributeCommitter(t, e, n).parts;
              }
              handleTextExpression(t) {
                return new s.NodePart(t);
              }
            })
          ),
            t("defaultTemplateProcessor", new n());
        },
      };
    }
  ),
  System.register(
    "https://unpkg.com/lit-html@1.2.1/lib/template-factory",
    ["https://unpkg.com/lit-html@1.2.1/lib/template"],
    function (t, e) {
      "use strict";
      var s, n;
      e && e.id;
      return (
        t("templateFactory", function (t) {
          let e = n.get(t.type);
          void 0 === e &&
            ((e = { stringsArray: new WeakMap(), keyString: new Map() }),
            n.set(t.type, e));
          let i = e.stringsArray.get(t.strings);
          if (void 0 !== i) return i;
          const r = t.strings.join(s.marker);
          return (
            void 0 === (i = e.keyString.get(r)) &&
              ((i = new s.Template(t, t.getTemplateElement())),
              e.keyString.set(r, i)),
            e.stringsArray.set(t.strings, i),
            i
          );
        }),
        {
          setters: [
            function (t) {
              s = t;
            },
          ],
          execute: function () {
            t("templateCaches", (n = new Map()));
          },
        }
      );
    }
  ),
  System.register(
    "https://unpkg.com/lit-html@1.2.1/lib/render",
    [
      "https://unpkg.com/lit-html@1.2.1/lib/dom",
      "https://unpkg.com/lit-html@1.2.1/lib/parts",
      "https://unpkg.com/lit-html@1.2.1/lib/template-factory",
    ],
    function (t, e) {
      "use strict";
      var s, n, i, r;
      e && e.id;
      return {
        setters: [
          function (t) {
            s = t;
          },
          function (t) {
            n = t;
          },
          function (t) {
            i = t;
          },
        ],
        execute: function () {
          t("parts", (r = new WeakMap())),
            t("render", (t, e, o) => {
              let a = r.get(e);
              void 0 === a &&
                (s.removeNodes(e, e.firstChild),
                r.set(
                  e,
                  (a = new n.NodePart(
                    Object.assign({ templateFactory: i.templateFactory }, o)
                  ))
                ),
                a.appendInto(e)),
                a.setValue(t),
                a.commit();
            });
        },
      };
    }
  ),
  System.register(
    "https://unpkg.com/lit-html@1.2.1/lit-html",
    [
      "https://unpkg.com/lit-html@1.2.1/lib/default-template-processor",
      "https://unpkg.com/lit-html@1.2.1/lib/template-result",
      "https://unpkg.com/lit-html@1.2.1/lib/directive",
      "https://unpkg.com/lit-html@1.2.1/lib/dom",
      "https://unpkg.com/lit-html@1.2.1/lib/part",
      "https://unpkg.com/lit-html@1.2.1/lib/parts",
      "https://unpkg.com/lit-html@1.2.1/lib/render",
      "https://unpkg.com/lit-html@1.2.1/lib/template-factory",
      "https://unpkg.com/lit-html@1.2.1/lib/template-instance",
      "https://unpkg.com/lit-html@1.2.1/lib/template",
    ],
    function (t, e) {
      "use strict";
      var s, n;
      e && e.id;
      return {
        setters: [
          function (e) {
            (s = e),
              t({
                DefaultTemplateProcessor: e.DefaultTemplateProcessor,
                defaultTemplateProcessor: e.defaultTemplateProcessor,
              });
          },
          function (e) {
            (n = e),
              t({
                SVGTemplateResult: e.SVGTemplateResult,
                TemplateResult: e.TemplateResult,
              });
          },
          function (e) {
            t({ directive: e.directive, isDirective: e.isDirective });
          },
          function (e) {
            t({ removeNodes: e.removeNodes, reparentNodes: e.reparentNodes });
          },
          function (e) {
            t({ noChange: e.noChange, nothing: e.nothing });
          },
          function (e) {
            t({
              AttributeCommitter: e.AttributeCommitter,
              AttributePart: e.AttributePart,
              BooleanAttributePart: e.BooleanAttributePart,
              EventPart: e.EventPart,
              isIterable: e.isIterable,
              isPrimitive: e.isPrimitive,
              NodePart: e.NodePart,
              PropertyCommitter: e.PropertyCommitter,
              PropertyPart: e.PropertyPart,
            });
          },
          function (e) {
            t({ parts: e.parts, render: e.render });
          },
          function (e) {
            t({
              templateCaches: e.templateCaches,
              templateFactory: e.templateFactory,
            });
          },
          function (e) {
            t({ TemplateInstance: e.TemplateInstance });
          },
          function (e) {
            t({
              createMarker: e.createMarker,
              isTemplatePartActive: e.isTemplatePartActive,
              Template: e.Template,
            });
          },
        ],
        execute: function () {
          "undefined" != typeof window &&
            (window.litHtmlVersions || (window.litHtmlVersions = [])).push(
              "1.2.1"
            ),
            t(
              "html",
              (t, ...e) =>
                new n.TemplateResult(t, e, "html", s.defaultTemplateProcessor)
            ),
            t(
              "svg",
              (t, ...e) =>
                new n.SVGTemplateResult(t, e, "svg", s.defaultTemplateProcessor)
            );
        },
      };
    }
  ),
  System.register(
    "file:///Users/alexandermalcolm/Code/haunted-bid-euchre-ui/dependencies/haunted/haunted",
    ["https://unpkg.com/lit-html@1.2.1/lit-html"],
    function (t, e) {
      "use strict";
      var s,
        n,
        i,
        r,
        o,
        a,
        l,
        u,
        c,
        h,
        p,
        d,
        m,
        f,
        g,
        _,
        v,
        b,
        x,
        y,
        k,
        w,
        C,
        N,
        P,
        E,
        S,
        T;
      e && e.id;
      function A(t) {
        n = t;
      }
      function V() {
        (n = null), (i = 0);
      }
      function M() {
        let t,
          e = [];
        function s() {
          t = null;
          let s = e;
          e = [];
          for (var n = 0, i = s.length; n < i; n++) s[n]();
        }
        return function (n) {
          e.push(n), null == t && (t = d(s));
        };
      }
      function R(t) {
        class e extends g {
          constructor(t, e, s) {
            super(t, s || e), (this.frag = e);
          }
          commit(e) {
            t(e, this.frag);
          }
        }
        return function (t, s, n) {
          const i = (n || s || {}).baseElement || HTMLElement,
            {
              observedAttributes: r = [],
              useShadowDOM: o = !0,
              shadowRootInit: a = {},
            } = n || s || {};
          class l extends i {
            constructor() {
              super(),
                !1 === o
                  ? (this._scheduler = new e(t, this))
                  : (this.attachShadow({ mode: "open", ...a }),
                    (this._scheduler = new e(t, this.shadowRoot, this)));
            }
            static get observedAttributes() {
              return t.observedAttributes || r || [];
            }
            connectedCallback() {
              this._scheduler.update();
            }
            disconnectedCallback() {
              this._scheduler.teardown();
            }
            attributeChangedCallback(t, e, s) {
              if (e === s) return;
              let n = "" === s || s;
              Reflect.set(this, _(t), n);
            }
          }
          const u = new Proxy(i.prototype, {
            getPrototypeOf: (t) => t,
            set(t, e, s, n) {
              let i;
              if (e in t) {
                if ((i = Object.getOwnPropertyDescriptor(t, e)) && i.set)
                  return i.set.call(n, s), !0;
                Reflect.set(t, e, s);
              }
              return (
                (i =
                  "symbol" == typeof e || "_" === e[0]
                    ? {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: s,
                      }
                    : (function (t) {
                        let e = t;
                        return Object.freeze({
                          enumerable: !0,
                          configurable: !0,
                          get: () => e,
                          set(t) {
                            (e = t), this._scheduler.update();
                          },
                        });
                      })(s)),
                Object.defineProperty(n, e, i),
                i.set && i.set.call(n, s),
                !0
              );
            },
          });
          return Object.setPrototypeOf(l.prototype, u), l;
        };
      }
      function L(t, ...e) {
        let s = i++,
          r = n[o],
          a = r.get(s);
        return a || ((a = new t(s, n, ...e)), r.set(s, a)), a.update(...e);
      }
      function $(t) {
        return L.bind(null, t);
      }
      function O(t) {
        return $(
          class extends v {
            constructor(e, s, n, i) {
              super(e, s), t(s, this);
            }
            update(t, e) {
              (this.callback = t),
                (this.lastValues = this.values),
                (this.values = e);
            }
            call() {
              (this.values && !this.hasChanged()) || this.run();
            }
            run() {
              this.teardown(),
                (this._teardown = this.callback.call(this.state));
            }
            teardown() {
              "function" == typeof this._teardown && this._teardown();
            }
            hasChanged() {
              return (
                !this.lastValues ||
                this.values.some((t, e) => this.lastValues[e] !== t)
              );
            }
          }
        );
      }
      function I(t, e) {
        t[u].push(e);
      }
      function H(t, e) {
        t[c].push(e);
      }
      function B({ render: t }) {
        const e = R(t),
          s = (function (t) {
            return (e) => {
              const s = {
                Provider: class extends HTMLElement {
                  constructor() {
                    super(),
                      (this.listeners = new Set()),
                      this.addEventListener(h, this);
                  }
                  disconnectedCallback() {
                    this.removeEventListener(h, this);
                  }
                  handleEvent(t) {
                    const { detail: e } = t;
                    e.Context === s &&
                      ((e.value = this.value),
                      (e.unsubscribe = this.unsubscribe.bind(this, e.callback)),
                      this.listeners.add(e.callback),
                      t.stopPropagation());
                  }
                  unsubscribe(t) {
                    this.listeners.delete(t);
                  }
                  set value(t) {
                    this._value = t;
                    for (let e of this.listeners) e(t);
                  }
                  get value() {
                    return this._value;
                  }
                },
                Consumer: t(function ({ render: t }) {
                  return t(x(s));
                }),
                defaultValue: e,
              };
              return s;
            };
          })(e);
        return { component: e, createContext: s };
      }
      function D() {
        const t = new WeakMap(),
          e = new WeakMap();
        class n extends g {
          constructor(t, e) {
            super(t, e), (this.state.virtual = !0);
          }
          render() {
            return this.state.run(() =>
              this.renderer.apply(this.host, this.args)
            );
          }
          commit(t) {
            this.host.setValue(t), this.host.commit();
          }
          teardown() {
            super.teardown();
            let s = e.get(this);
            t.delete(s);
          }
        }
        return function (i) {
          return s.directive(function (...s) {
            return (r) => {
              let o = t.get(r);
              o ||
                ((o = new n(i, r)),
                t.set(r, o),
                e.set(o, r),
                (function t(e, s, n = s.startNode) {
                  let i = n.parentNode,
                    r = new MutationObserver((i) => {
                      for (let o of i) {
                        if (N.call(o.removedNodes, n)) {
                          r.disconnect(),
                            n.parentNode instanceof ShadowRoot
                              ? t(e, s)
                              : e.teardown();
                          break;
                        }
                        if (N.call(o.addedNodes, n.nextSibling)) {
                          r.disconnect(), t(e, s, n.nextSibling || void 0);
                          break;
                        }
                      }
                    });
                  r.observe(i, { childList: !0 });
                })(o, r)),
                (o.args = s),
                o.update();
            };
          });
        };
      }
      return (
        t("hook", $),
        {
          setters: [
            function (e) {
              (s = e), t({ html: e.html, render: e.render });
            },
          ],
          execute: function () {
            (i = 0),
              (r = Symbol("haunted.phase")),
              (o = Symbol("haunted.hook")),
              (a = Symbol("haunted.update")),
              (l = Symbol("haunted.commit")),
              (u = Symbol("haunted.effects")),
              (c = Symbol("haunted.layoutEffects")),
              (h = "haunted.context"),
              t(
                "State",
                (p = class {
                  constructor(t, e) {
                    (this.update = t),
                      (this.host = e),
                      (this[o] = new Map()),
                      (this[u] = []),
                      (this[c] = []);
                  }
                  run(t) {
                    A(this);
                    let e = t();
                    return V(), e;
                  }
                  _runEffects(t) {
                    let e = this[t];
                    A(this);
                    for (let t of e) t.call(this);
                    V();
                  }
                  runEffects() {
                    this._runEffects(u);
                  }
                  runLayoutEffects() {
                    this._runEffects(c);
                  }
                  teardown() {
                    this[o].forEach((t) => {
                      "function" == typeof t.teardown && t.teardown();
                    });
                  }
                })
              ),
              (d = Promise.resolve().then.bind(Promise.resolve())),
              (m = M()),
              (f = M()),
              t(
                "BaseScheduler",
                (g = class {
                  constructor(t, e) {
                    (this.renderer = t),
                      (this.host = e),
                      (this.state = new p(this.update.bind(this), e)),
                      (this[r] = null),
                      (this._updateQueued = !1);
                  }
                  update() {
                    this._updateQueued ||
                      (m(() => {
                        let t = this.handlePhase(a);
                        f(() => {
                          this.handlePhase(l, t),
                            f(() => {
                              this.handlePhase(u);
                            });
                        }),
                          (this._updateQueued = !1);
                      }),
                      (this._updateQueued = !0));
                  }
                  handlePhase(t, e) {
                    switch (((this[r] = t), t)) {
                      case l:
                        return this.commit(e), void this.runEffects(c);
                      case a:
                        return this.render();
                      case u:
                        return this.runEffects(u);
                    }
                    this[r] = null;
                  }
                  render() {
                    return this.state.run(() =>
                      this.renderer.call(this.host, this.host)
                    );
                  }
                  runEffects(t) {
                    this.state._runEffects(t);
                  }
                  teardown() {
                    this.state.teardown();
                  }
                })
              ),
              (_ = (t = "") =>
                t.replace(/-+([a-z])?/g, (t, e) => (e ? e.toUpperCase() : ""))),
              t(
                "Hook",
                (v = class {
                  constructor(t, e) {
                    (this.id = t), (this.state = e);
                  }
                })
              ),
              (b = O(I)),
              t("useEffect", b),
              (x = $(
                class extends v {
                  constructor(t, e, s) {
                    super(t, e),
                      (this._updater = this._updater.bind(this)),
                      (this._ranEffect = !1),
                      (this._unsubscribe = null),
                      I(e, this);
                  }
                  update(t) {
                    if (this.state.virtual)
                      throw new Error("can't be used with virtual components");
                    return (
                      this.Context !== t &&
                        (this._subscribe(t), (this.Context = t)),
                      this.value
                    );
                  }
                  call() {
                    this._ranEffect ||
                      ((this._ranEffect = !0),
                      this._unsubscribe && this._unsubscribe(),
                      this._subscribe(this.Context),
                      this.state.update());
                  }
                  _updater(t) {
                    (this.value = t), this.state.update();
                  }
                  _subscribe(t) {
                    const e = { Context: t, callback: this._updater };
                    this.state.host.dispatchEvent(
                      new CustomEvent(h, {
                        detail: e,
                        bubbles: !0,
                        cancelable: !0,
                        composed: !0,
                      })
                    );
                    const { unsubscribe: s, value: n } = e;
                    (this.value = s ? n : t.defaultValue),
                      (this._unsubscribe = s);
                  }
                  teardown() {
                    this._unsubscribe && this._unsubscribe();
                  }
                }
              )),
              t("useContext", x),
              (y = $(
                class extends v {
                  constructor(t, e, s, n) {
                    super(t, e), (this.value = s()), (this.values = n);
                  }
                  update(t, e) {
                    return (
                      this.hasChanged(e) &&
                        ((this.values = e), (this.value = t())),
                      this.value
                    );
                  }
                  hasChanged(t = []) {
                    return t.some((t, e) => this.values[e] !== t);
                  }
                }
              )),
              t("useMemo", y),
              t("useCallback", (t, e) => y(() => t, e)),
              (k = O(H)),
              t("useLayoutEffect", k),
              (w = $(
                class extends v {
                  constructor(t, e, s) {
                    super(t, e),
                      (this.updater = this.updater.bind(this)),
                      "function" == typeof s && (s = s()),
                      this.makeArgs(s);
                  }
                  update() {
                    return this.args;
                  }
                  updater(t) {
                    if ("function" == typeof t) {
                      const e = t,
                        [s] = this.args;
                      t = e(s);
                    }
                    this.makeArgs(t), this.state.update();
                  }
                  makeArgs(t) {
                    this.args = Object.freeze([t, this.updater]);
                  }
                }
              )),
              t("useState", w),
              (C = $(
                class extends v {
                  constructor(t, e, s, n, i) {
                    super(t, e),
                      (this.dispatch = this.dispatch.bind(this)),
                      (this.currentState = void 0 !== i ? i(n) : n);
                  }
                  update(t) {
                    return (
                      (this.reducer = t), [this.currentState, this.dispatch]
                    );
                  }
                  dispatch(t) {
                    (this.currentState = this.reducer(this.currentState, t)),
                      this.state.update();
                  }
                }
              )),
              t("useReducer", C),
              t("useRef", (t) => y(() => ({ current: t }), [])),
              (N = Array.prototype.includes),
              (P = B({ render: s.render })),
              (E = P.component),
              (S = P.createContext),
              t("component", E),
              t("createContext", S),
              (T = D()),
              t("virtual", T),
              t("default", B);
          },
        }
      );
    }
  );
const __exp = __instantiate(
  "file:///Users/alexandermalcolm/Code/haunted-bid-euchre-ui/dependencies/haunted/haunted"
);
export const html = __exp.html;
export const render = __exp.render;
export default __exp.default;
export const BaseScheduler = __exp.BaseScheduler;
export const Hook = __exp.Hook;
export const State = __exp.State;
export const component = __exp.component;
export const createContext = __exp.createContext;
export const hook = __exp.hook;
export const useCallback = __exp.useCallback;
export const useContext = __exp.useContext;
export const useEffect = __exp.useEffect;
export const useLayoutEffect = __exp.useLayoutEffect;
export const useMemo = __exp.useMemo;
export const useReducer = __exp.useReducer;
export const useRef = __exp.useRef;
export const useState = __exp.useState;
export const virtual = __exp.virtual;
